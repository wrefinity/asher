// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ads {
  id               String        @id @default(cuid())
  title            String
  description      String
  amountPaid       Decimal       @db.Decimal(18, 2)
  locations        String[]
  bussinessDetails Json
  contactInfo      String
  startedDate      DateTime
  endDate          DateTime
  attachment       String[]
  isListed         Boolean       @default(false)
  views            Int           @default(0)
  clicks           Int           @default(0)
  reach            Int           @default(0)
  userId           String
  user             users         @relation(fields: [userId], references: [id])
  referenceId      String?
  transaction      Transactions? @relation(fields: [referenceId], references: [id])
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model landlords {
  id                    String                  @id @default(cuid())
  property              properties[]
  userId                String
  user                  users                   @relation(fields: [userId], references: [id])
  tenants               tenants[]
  lnadlordSupportTicket lnadlordSupportTicket[]
  transactions          PropertyTransactions[]
}

model properties {
  id           String  @id @default(cuid())
  name         String
  description  String
  propertysize Int?
  isDeleted    Boolean @default(false)

  // owners
  landlordId String
  landlord   landlords @relation(fields: [landlordId], references: [id])
  agencyId   String?
  agency     agency?   @relation(fields: [agencyId], references: [id])
  agents     agents[]

  // time attributes
  yearBuilt DateTime?
  createdAt DateTime? @default(now())

  // address
  city     String?
  state    String?
  country  String?
  zipcode  String?
  location String?

  // visualizations
  images   String[]
  videourl String[]

  //transaction can be expenses incurred or income generated
  transactions PropertyTransactions[]

  amenities       String[]
  // apartments
  totalApartments Int?
  apartments      apartments[]
  ratings         Rating[]
  tenants         tenants[]
  inventory       inventory[]
  applicant       application[]
  maintenance     maintenance[]
}

model apartments {
  id                   String                         @id @default(cuid())
  code                 String
  description          String
  sittingRoom          Int?
  waitingRoom          Int?
  bedrooms             Int?
  kitchen              Int?
  bathrooms            Int?
  garages              Int?
  floorplans           String[]
  facilities           String[]
  offices              Int?
  isVacant             Boolean                        @default(true)
  isDeleted            Boolean                        @default(false)
  rentalAmount         Decimal
  images               String[]
  videourl             String[]
  propertyId           String
  property             properties                     @relation(fields: [propertyId], references: [id])
  histories            appartmentTransactionHistory[]
  transactions         PropertyTransactions[]
  inventory            inventory[]
  tenantPaymentHistory tenantPaymentHistory[]
  tenantsId            String?
  currentTenant        tenants?                       @relation(fields: [tenantsId], references: [id])
  maintenance          maintenance[]
}

model appartmentTransactionHistory {
  id String @id @default(cuid())

  rentDuration Int
  amountPaid   Decimal

  apartmentsId String?
  apartments   apartments? @relation(fields: [apartmentsId], references: [id])

  tenantId String
  tenant   tenants @relation(fields: [tenantId], references: [id])

  transactionId String?
  transactions  PropertyTransactions? @relation(fields: [transactionId], references: [id])
}

//inventory accounts for the lists of items
// for appartments within the inventory
model inventory {
  id           String    @id @default(cuid())
  location     String
  apartmentId  String
  propertiesId String?
  quantity     Int
  description  String?
  createdAt    DateTime? @default(now())

  propertyApartments apartments  @relation(fields: [apartmentId], references: [id])
  properties         properties? @relation(fields: [propertiesId], references: [id])
}

// enum TransactionType {
//   EXPENSE
//   REVENUE
// }
enum TransactionType {
  FUNDWALLET
  WITHDRAWAL
  MAKEPAYMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Transactions {
  id                String            @id @default(cuid())
  description       String
  amount            Decimal           @db.Decimal(18, 2)
  userId            String
  user              users             @relation(fields: [userId], references: [id])
  transactionType   TransactionType?
  transactionStatus TransactionStatus?
  walletId          String
  wallet            wallet            @relation(fields: [walletId], references: [id])
  referenceId       String            @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  Ads               Ads[]
}

enum PropertyTransactionsType {
  RENT_DUE
  RENT_PAYMENT
  MAINTAINACE_FEE
  LANDLORD_PAYOUT
}

enum PaymentFrequenct {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model PropertyTransactions {
  id                           String                         @id @default(cuid())
  description                  String
  amount                       Decimal                        @db.Decimal(18, 2)
  propertyId                   String
  properties                   properties                     @relation(fields: [propertyId], references: [id])
  appartmentId                 String
  apartments                   apartments                     @relation(fields: [appartmentId], references: [id])
  tenantId                     String
  tenant                       tenants                        @relation(fields: [tenantId], references: [id])
  landlordId                   String
  landlord                     landlords                      @relation(fields: [landlordId], references: [id])
  appartmentTransactionHistory appartmentTransactionHistory[]
  transactionStatus            TransactionStatus
  type                         PropertyTransactionsType
  referenceId                  String                         @unique
  dueDate                      DateTime?
  paidDate                     DateTime?
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  wallet                       wallet?                        @relation(fields: [walletId], references: [id])
  walletId                     String?
  paymentFrequency             PaymentFrequenct
  nextDueDate                  DateTime
  lastPaidDate                 DateTime?
  missedPayment                Int                            @default(0)
}

model agency {
  id         String       @id @default(cuid())
  name       String
  agents     agents[]
  properties properties[]
  // TODO:
}

model agents {
  id         String      @id @default(cuid())
  agentId    String?
  about      String?
  facebook   String?
  twitter    String?
  instagram  String?
  linkedin   String?
  // date fields
  createdAt  DateTime?   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime?   @default(now()) @db.Timestamptz(6)
  // agents relationships
  userId     String
  user       users       @relation(fields: [userId], references: [id])
  agencyId   String?
  agency     agency?     @relation(fields: [agencyId], references: [id])
  propertyId String?
  properties properties? @relation(fields: [propertyId], references: [id])
  tenant     tenants[]
}

model Rating {
  id          String  @id @default(cuid())
  ratingValue Int     @default(0) // a rating scale from 0 to 5
  comments    String? // Optional field for user comments

  propertyId String?
  property   properties? @relation(fields: [propertyId], references: [id])

  userId String?
  user   users?  @relation("userRated", fields: [userId], references: [id])

  ratedByUserId String
  ratedBy       users  @relation("ratedByUser", fields: [ratedByUserId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

// tenant session
model tenantPaymentHistory {
  id            String    @id @default(cuid())
  rentStartDate DateTime? @db.Timestamptz(6)
  rentEndDate   DateTime? @db.Timestamptz(6)

  expectedRentAmount Decimal? @db.Decimal(18, 2)
  amountPaid         Decimal? @db.Decimal(18, 2)

  // relationships feilds
  tenantId String?
  tenant   tenants? @relation(fields: [tenantId], references: [id])

  apartmentsId String?
  apartments   apartments? @relation(fields: [apartmentsId], references: [id])
}

model tenants {
  id         String @id @default(cuid())
  tenantId   String @unique
  landlordId String

  rentstatus            Int
  leaseStartDate        DateTime
  leaseEndDate          DateTime
  isCurrentLease        Boolean   @default(true)
  isexisted             Int?
  dateOfFirstRent       DateTime? @default(now()) @db.Timestamptz(6)
  apartmentOrFlatNumber Int?

  // relationships definitions
  userId                       String                         @unique
  user                         users                          @relation(fields: [userId], references: [id])
  landlord                     landlords                      @relation(fields: [landlordId], references: [id])
  agentId                      String?
  agent                        agents?                        @relation(fields: [agentId], references: [id])
  propertyId                   String?
  property                     properties?                    @relation(fields: [propertyId], references: [id])
  history                      tenantPaymentHistory[]
  appartmentTransactionHistory appartmentTransactionHistory[]
  apartments                   apartments[]
  tenantSupportTicket          tenantSupportTicket[]
  PropertyTransactions         PropertyTransactions[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// user information definition 
// defining the user roles
enum userRoles {
  VENDOR
  LANDLORD
  TENANT
  WEBUSER
  AGENT
  ADMIN
}

model balances {
  id                 String  @id @default(cuid())
  amount             Decimal @default(0.00) @db.Decimal(18, 2)
  outstandingBalance Decimal @default(0.00) @db.Decimal(18, 2)
  userId             String  @unique
  user               users   @relation(fields: [userId], references: [id])
}

model users {
  id         String  @id @default(cuid())
  email      String  @unique
  password   String?
  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user role definition default is webuser
  role userRoles[] @default([WEBUSER])

  // foreign key and relational fields 
  balance                balances?
  VerificationToken      VerificationToken[]
  tenant                 tenants[]
  landlords              landlords[]
  community              Community[]
  communityPost          CommunityPost[]
  communityPostLikes     CommunityPostLikes[]
  communityPostViews     CommunityPostViews[]
  sentEmails             Email[]                  @relation("SentEmails")
  RecievedEmails         Email[]                  @relation("RecievedEmails")
  applicantion           application[]
  agents                 agents[]
  Comments               Comments[]
  ratingsGiven           Rating[]                 @relation("ratedByUser")
  ratingsReceived        Rating[]                 @relation("userRated")
  messagesSent           Message[]                @relation("messagesSent")
  messagesReceived       Message[]                @relation("messagesReceived")
  chatRoomsUser1         ChatRoom[]               @relation("chatRoomsUser1")
  chatRoomsUser2         ChatRoom[]               @relation("chatRoomsUser2")
  profileId              String?
  profile                profile?                 @relation(fields: [profileId], references: [id])
  residentialInformation residentialInformation[]
  CommunityMember        CommunityMember[]
  // maintenance            maintenance[]
  Ads                    Ads[]
  services               services[]
  wallet                 wallet[]
  Transactions           Transactions[]

  // maintenance maintenance[] @relation(name: "vendorUser")
  tenantMaintenanceUser maintenance[] @relation("tenantUser")
  vendorMaintenaceUser  maintenance[] @relation("vendorUser")
  creditScore           creditScore?
}

model creditScore {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        users    @relation(fields: [userId], references: [id])
  score       Int
  lastUpdated DateTime @default(now())

  //NOTE: Factors that can possibly contribute to the score
  paymentHistory    Float
  rentalHistory     Float
  maintainanceScore Float
  reviewScore       Float
}

model profile {
  id          String    @id @default(cuid())
  gender      String?
  phoneNumber String?
  address     String?
  dateOfBirth DateTime?
  fullname    String?
  profileUrl  String?
  users       users[]
}

model VerificationToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    String
  user      users     @relation(fields: [userId], references: [id])
  expiresAt DateTime?
  createdAt DateTime  @default(now())
}

enum CommunityVisibility {
  PUBLIC
  PRIVATE
}

model Community {
  id                      String                    @id @default(cuid())
  communityName           String                    @unique
  communityOwnerId        String
  user                    users                     @relation(fields: [communityOwnerId], references: [id])
  description             String
  visibility              CommunityVisibility       @default(PUBLIC) // we can have an enum it should either be public or private
  communityProfileImage   String?
  communityProfileUrl     String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  CommunityMember         CommunityMember[]
  CommunityInvitationLink CommunityInvitationLink[]
}

enum MembershipStatus {
  INVITED
  MEMBER
  REJECTED
}

model CommunityMember {
  id          String           @id @default(cuid())
  communityId String
  userId      String
  status      MembershipStatus
  community   Community        @relation(fields: [communityId], references: [id])
  user        users            @relation(fields: [userId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt()

  @@unique([communityId, userId])
}

model CommunityInvitationLink {
  id          String    @id @default(cuid())
  communityId String
  inviteCode  String    @unique
  expiresAt   DateTime
  community   Community @relation(fields: [communityId], references: [id])
  createdAt   DateTime  @default(now())

  @@index([inviteCode])
}

model CommunityPost {
  id          String               @id @default(cuid())
  communityId String
  userId      String
  title       String
  category    String
  tags        String[]
  content     String
  imageUrl    String?
  likesCount  Int                  @default(0)
  viewsCount  Int                  @default(0)
  likes       CommunityPostLikes[]
  views       CommunityPostViews[]
  user        users                @relation(fields: [userId], references: [id])
  Comments    Comments[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model CommunityPostLikes {
  id        String        @id @default(cuid())
  postId    String
  userId    String
  post      CommunityPost @relation(fields: [postId], references: [id])
  user      users         @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
}

model CommunityPostViews {
  id     String        @id @default(cuid())
  postId String
  userId String
  post   CommunityPost @relation(fields: [postId], references: [id])
  user   users         @relation(fields: [userId], references: [id])
}

model Comments {
  id              String        @id @default(cuid())
  postId          String
  userId          String
  post            CommunityPost @relation(fields: [postId], references: [id])
  user            users         @relation(fields: [userId], references: [id])
  comment         String
  parentCommentId String?
  parentComment   Comments?     @relation("ParentChildComment", fields: [parentCommentId], references: [id])
  childComments   Comments[]    @relation("ParentChildComment")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([parentCommentId])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model lnadlordSupportTicket {
  id                  String       @id @default(cuid())
  landlordId          String
  landlord            landlords    @relation(fields: [landlordId], references: [id])
  supportTicketNumber String
  subject             String
  description         String
  status              TicketStatus @default(OPEN)
  attachment          String[]
  assignedTo          String //(Landlord | Support)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model tenantSupportTicket {
  id                  String       @id @default(cuid())
  tenantId            String
  tenant              tenants      @relation(fields: [tenantId], references: [id])
  supportTicketNumber String
  subject             String
  description         String
  status              TicketStatus @default(OPEN)
  attachment          String[]
  assignedTo          String //(Landlord | Support)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Email {
  id               String   @id @default(cuid())
  senderEmail      String
  recieverEmail    String
  subject          String
  body             String
  attachment       String[]
  isReadBySender   Boolean  @default(true)
  isReadByReciever Boolean  @default(false)
  isDraft          Boolean  @default(true)
  isSent           Boolean  @default(false)
  createdAt        DateTime @default(now())
  sender           users    @relation("SentEmails", fields: [senderEmail], references: [email])
  reciver          users    @relation("RecievedEmails", fields: [recieverEmail], references: [email])
}

// chats schema
// Define the messages model

enum chatType {
  MAINTENANCE
  APPLICATION
  SUPPORT
}

model Message {
  id         String    @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  createdAt  DateTime  @default(now())
  chatRoomId String
  chatType   chatType?

  sender   users    @relation("messagesSent", fields: [senderId], references: [id])
  receiver users    @relation("messagesReceived", fields: [receiverId], references: [id])
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id])
}

// Define the chatRooms model for one-on-one chats
model ChatRoom {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user1    users     @relation("chatRoomsUser1", fields: [user1Id], references: [id])
  user2    users     @relation("chatRoomsUser2", fields: [user2Id], references: [id])
  messages Message[]

  @@unique([user1Id, user2Id])
}

// Define the applicant model
enum ApplicationStatus {
  PENDING
  DECLINED
  COMPLETED
  ACCEPTED
}

model application {
  id        String            @id @default(cuid())
  // leaseStartDate  DateTime?
  // leaseEndDate    DateTime?
  // moveInDate      DateTime?
  // rentAmount      Decimal?
  // securityDeposit Decimal?
  // leaseTerm       String?
  status    ApplicationStatus @default(PENDING)
  isDeleted Boolean           @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation ship fields
  userId String?
  user   users?  @relation(fields: [userId], references: [id])

  // residentialInformation residentialInformation[]
  residentialId      String?
  residentialInfo    residentialInformation? @relation(fields: [residentialId], references: [id])
  emergencyContactId String?
  emergencyInfo      emergencyContact?       @relation(fields: [emergencyContactId], references: [id])

  employmentInformationId String?
  employmentInfo          EmploymentInformation? @relation(fields: [employmentInformationId], references: [id])
  documents               document[]

  properties   properties? @relation(fields: [propertiesId], references: [id])
  propertiesId String?

  personalDetails            applicantPersonalDetails @relation(fields: [applicantPersonalDetailsId], references: [id])
  applicantPersonalDetailsId String
  guarantorInformation       guarantorInformation?    @relation(fields: [guarantorInformationId], references: [id])
  guarantorInformationId     String?
}

model applicantPersonalDetails {
  id            String        @id @default(cuid())
  title         String
  firstName     String
  middleName    String?
  lastName      String
  dob           DateTime
  email         String        @unique
  phoneNumber   String
  maritalStatus String
  application   application[]
  nextOfKin     nextOfKin[]
}

model nextOfKin {
  id                         String                    @id @default(cuid())
  lastName                   String
  relationship               String
  email                      String
  firstName                  String
  phoneNumber                String
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt
  middleName                 String?
  // One-to-one relationship with applicantPersonalDetails
  applicantPersonalDetails   applicantPersonalDetails? @relation(fields: [applicantPersonalDetailsId], references: [id])
  applicantPersonalDetailsId String?                   @unique
}

// Define the residentialInformation model
// previous adress covering six years
model PrevAddress {
  id                       String                  @id @default(cuid())
  address                  String
  lengthOfResidence        String
  residentialInformation   residentialInformation? @relation(fields: [residentialInformationId], references: [id])
  residentialInformationId String?
}

model residentialInformation {
  id                String @id @default(cuid())
  address           String
  addressStatus     String
  lengthOfResidence String

  landlordOrAgencyPhoneNumber String
  landlordOrAgencyEmail       String
  landlordOrAgencyName        String

  user   users?  @relation(fields: [userId], references: [id])
  userId String?

  prevAddresses PrevAddress[]
  application   application[]
}

// Define the guarantorInformation model
model guarantorInformation {
  id          String @id @default(cuid())
  fullName    String
  phoneNumber String
  email       String
  address     String

  application application[]
}

// Define the emergencyContact model
model emergencyContact {
  id          String        @id @default(cuid())
  fullname    String
  phoneNumber String
  email       String
  address     String
  application application[]
}

// Define the document model
model document {
  id           String   @id @default(cuid())
  documentName String
  documentUrl  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  applicantId String
  application application @relation(fields: [applicantId], references: [id])
}

// Define the EmploymentInformation model
model EmploymentInformation {
  id                String  @id @default(cuid())
  employmentStatus  String
  taxCredit         String?
  childBenefit      String?
  childMaintenance  String?
  disabilityBenefit String?
  housingBenefit    String?
  others            String?
  pension           String?
  moreDetails       String?
  // employerCompany   String
  // employerEmail     String
  // employerPhone    String
  // positionTitle    String

  application application[]
}

// user wallets
model wallet {
  id                   String                 @id @default(cuid())
  userId               String                 @unique
  user                 users                  @relation(fields: [userId], references: [id])
  transactions         Transactions[]
  propertyTransactions PropertyTransactions[]
  balance              Decimal                @default(0.00) @db.Decimal(18, 2)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}

model category {
  id          String        @id @default(cuid())
  name        String
  image       String[]
  labels      String[]
  isDeleted   Boolean       @default(false)
  subCategory subCategory[]
  maintenance maintenance[]
  services    services[]
}

model subCategory {
  id          String        @id @default(cuid())
  name        String
  image       String[]
  labels      String[]
  isDeleted   Boolean       @default(false)
  category    category      @relation(fields: [categoryId], references: [id])
  categoryId  String
  maintenance maintenance[] @relation("SubCategoryMaintenance")
  services    services[]
}

enum maintenanceStatus {
  ASSIGNED
  UNASSIGNED
  PENDING
  COMPLETED
}

model maintenance {
  id           String   @id @default(cuid())
  description  String
  attachments  String[]
  offer        String[]
  scheduleDate DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isDeleted    Boolean  @default(false)

  // relation fields
  user          users         @relation(name: "tenantUser", fields: [userId], references: [id])
  userId        String
  vendor        users?        @relation(name: "vendorUser", fields: [vendorId], references: [id])
  vendorId      String?
  property      properties?   @relation(fields: [propertyId], references: [id])
  propertyId    String?
  apartment     apartments?   @relation(fields: [apartmentId], references: [id])
  apartmentId   String?
  category      category      @relation(fields: [categoryId], references: [id])
  categoryId    String
  subcategories subCategory[] @relation("SubCategoryMaintenance")

  // status   status @relation(fields: [statusId], references: [id])
  // statusId String
  status maintenanceStatus @default(UNASSIGNED)

  services  services? @relation(fields: [serviceId], references: [id])
  serviceId String?
}

//  status will be in-progress, completed, assigned, aborted
model status {
  id        String  @id @default(cuid())
  name      String
  isDeleted Boolean @default(false)
  // maintenances maintenance[]
}

enum vendorAvailability {
  YES
  NO
}

model services {
  id String @id @default(cuid())

  currentJobs        Int                @default(0)
  availability       vendorAvailability @default(YES)
  standardPriceRange String //example 20-50k
  mediumPriceRange   String //example 50-70k
  premiumPriceRange  String //example 70-100k

  isDeleted Boolean @default(false)

  user     users  @relation(fields: [vendorId], references: [id])
  vendorId String

  category   category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  subcategory   subCategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId String?

  maintenance maintenance[]
}
